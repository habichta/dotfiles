[cola]
	spellcheck = false
[user]
	name = Arthur Habicht
	email = arthur.habicht@helpany.com
	signingkey = C503695B
[alias]
    lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg3 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg = !"git lg1"
    c = commit
    ch = checkout
    s = "!git status --untracked-files=all"
    sw = switch
    d = diff
    a = "!git add $@ && git s"
    p = push
    ctags = "!bash -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags' git-ctags"
    update-all = "!f() { \
        git fetch --all && \
        git rebase && \
        git submodule update --init --recursive; \
    }; f"
    branch-clean-all-local = !git branch -vv | grep \": gone]\" | awk \"{print \\$1}\" | xargs git branch -D
    branch-clean-prune-origin = !git remote prune origin
    amendpush = !git commit --amend && git push --force-with-lease
    clean-state = "!f() { \
        git update-all; \
        if [ \"$1\" = '--hard' ]; then \
          git reset --hard && git stash clear; \
        fi; \
      }; f"

    af = "!f() { \
      files=$(git status --porcelain | awk '{print $2}' | fzf --multi --preview 'if git ls-files --error-unmatch -- {} >/dev/null 2>&1; then git diff --color=always -- {}; else batcat --style=plain --color=always {}; fi' --preview-window=right:70%:wrap --bind 'tab:toggle+down'); \
      [ -n \"$files\" ] && echo \"$files\" | xargs git add; \
    }; f"

    rf = "!f() { \
        files=$(git diff --cached --name-only | fzf --multi --preview 'if git ls-files --error-unmatch -- {} >/dev/null 2>&1; then git diff --staged --color=always -- {}; else batcat --style=plain --color=always {}; fi' --preview-window=right:70%:wrap --bind 'tab:toggle+down'); \
        [ -n \"$files\" ] && echo \"$files\" | xargs git reset; \
    }; f"


[core]
	editor = nvim
  pager = "type diff-so-fancy > /dev/null 2>&1 && diff-so-fancy | less -RFX '+r/^(Author|added|deleted|modified|renamed): ' || less -RFX"
	excludesfile = "~/.dotfiles/git/.gitignore"
[init]
  templatedir = ~/.git-templates
[merge]
  tool = diffconflicts
[mergetool]
  keepBackup = false
	prompt = false
[mergetool.diffconflicts]
  cmd = vim -c DiffConflicts "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
  trustExitCode = true
[pager]
  stash = false
  grep = false
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[help]
	autocorrect = 1
[diff "jupyternotebook"]
	command = git-nbdiffdriver diff
[merge "jupyternotebook"]
	driver = git-nbmergedriver merge %O %A %B %L %P
	name = jupyter notebook merge driver
[difftool "nbdime"]
	cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"
[difftool]
	prompt = false
[mergetool "nbdime"]
	cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
[color]
	ui = true
	diff = auto
	status = auto
	branch = auto
